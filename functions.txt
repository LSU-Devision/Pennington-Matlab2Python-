        function self = Avatar(input,varargin)
        function [Case,alpha2,alpha3,newV] = fixOrientation(self)
        function newV = returnToOrginialOrientation(CaseRot,alpha2,alpha3,self,BdyPart)
        function [var_v, var_f] = peelSkin(self,pCases)
        function [v,f] = deleteProblems(self,bdyEdges)
        function [leftknee, rightknee] = getKnee(self)
        function [lLeg, rLeg] = getLegsMin(self)
        function [k9] = getCrotch(self)
        function [y] = getMissingY(self,x,z)
        function [k9_adj] = adjustCrotch(self)
        function [k2, k4] = getArmpits(self)
        function [rightArmpit, leftArmpit] = getArmpitsAlt(self)
        function p = getOneArmpit(self,faces,p,step,side)
        function [chestCircumference] = getChestCircumference(self)
        function [armVertices, armVerticesIdx, faces] = armSearch(self, side)
        function [vIdx] = trunkSearch(self)
        function [legIdx] = getLegs(self)
        function [rThighGirth, lThighGirth,...] = getThighGirth(self)
        function [headIdx] = getHead(self)
        function [lShoulder, rShoulder] = getShoulders(self) 
        function [leftArmLength, rightArmLength,armMaxR, armMaxL] = getArmLength(self)
        function [collar] = getCollar(self)
        function [collarScalpLength] = getCollarScalpLength(self)
        function [trunkLength] = getTrunkLength(self)
        function [lLegLength, rLegLength] = getLegLength(self)
        function [crotchHeight] = getCrotchHeight(self)
        function [trunkIdx] = getTrunk(self)
        function [circumference, end_points] = getHip(self)
        function [circumference, end_points] = getWaist(self)
        function nose_tip = getNoseTip(self)
        function [rtoe_tip, rheel_tip, ltoe_tip, lheel_tip] = getFeetTips(self)
        function bodyType = getBodyType(self)
        function [surface] = getWBSurfaceArea(self)
        function [volume,surface] = getSurfaceArea(self)
        function [volume,surface] = getSurfaceAreaAndVolume(self)
        function [surface] = getSurfaceAreaPartial(self,indices,isleg)
        function [test_vol, volume,surface] = getSurfaceAreaAndVolumePartial(self,indices,isleg,TotalBodyVolume)
        function [rwrist, lwrist,...] = getWrist(self)
        function [rwrist, lwrist,...] = getWrist_old(self)
        function [distl,distr,distrl] = getCurve(self, d, n)
        function [vOnLine,vIndex] = getVOnLine(self, v, zValue, keepIdx)
        function [rightforearmgirth,leftforearmgirth,...] = getArmGirth(self)
        function [lAnkle, rAnkle, lAnkleGirth, rAnkleGirth, rankle_medialPoint, rankle_lateralPoint, lankle_medialPoint, lankle_lateralPoint] = getAnkleGirth(self)
        function [lCalfGirth, rCalfGirth, rcalf_backPoint, rcalf_medialPoint, rcalf_lateralPoint, lcalf_backPoint, lcalf_medialPoint, lcalf_lateralPoint] = getCalf(self)
        function calfGirth = calfGirthOther(self,zValue,angle,legVal)
        function [calfGirth,zValue,angle] = calfGirth(self, zStart, zEnd, LegVal)
        function [x,y,z] = slice_n_dice(self, n1, n2, zStart,zEnd, keepIdx)
        function [p1,p3] = findMaxMin(self,left,right,num)
        function values = extractValues(self)
        function values = extractEllipseValues(self)
        function values = extractTemplateValues(self)
        function [markers] = getMarkers(self)
        function  createMarkers_template(self, input)
        function  createMarkers_Txt_Jpg(self, input)
        function plot2d(self,keyPoints)
        function plot3d(self)
        function plot3d_2(self)
        function plot3d_3(self)
        function plotCurve(self,d)
        function plotAll(self)
        function plot2d_gui(self,axes)
        function plot3d_gui(self,axes)
        function plot3d_points_gui(self,axes)
        function plotCurve_gui(self,d,laxes,caxes,raxes,daxes)
        function plot_simplePartition(self)
function [newV,newF] = meshPoly(v,e)
function [p1, p3] = find_minmax(v1, v3, left, right,size)
function output = sosmooth3(x,N) %%N is odd
function v = crossAll(v1,v2)
function norms = normAll(M)
function [c,b] = getCircumference(x,y)
function [volume] = SignedVolumeOfTriangle(v1,v2,v3)
function bdyEdges = getBoundaryEdges(faces)
function [f,v] = removeBoundaryProblems(f,v)
function list = findHoles(bdyEdges)
function [semimajor_axis, semiminor_axis, x0, y0, phi] = ellipse_fit(x, y)
function [vertex,face] = read_ply(filename)
function obj = readObj(fname)
function [Elements,varargout] = plyread(Path,Str)
function [addf,f,v] = meshRepair(f,v)
function [l_e_created,vA_hat,AvV,f]=holeFilling_Fit3D(f,vA_hat,AvV,holeEdges,d)
function [list,bdyEdges,f,v] = getListOfHoles(f,v)
function fitPoly = fitPolynomial(v,d,p)
function [fitPoly,p] = fitPolyToHole(f,v,bdyEdges,d)
function alpha = anglePoints3d(varargin)
function vn = normalizeVector3d(v)
function c = vectorCross3d(a,b)
function plane2 = normalizePlane(plane1)
function point = projPointOnPlane(point, plane)
function dist = distancePoints(p1, p2, varargin)
function [Bdry_info,Bdry_info_tmp,j,i]=FillHoles_Fit3D(v,f,Bdry_info_tmp,Bdry_info,j,i,fitPoly,p,epsilon)
function thirdV = getThirdV(f,v,holeEdges,fitPoly,p)
function x = closestPointOnPoly(fitPoly,p)
function D = gradOfDistanceOfPointToPoly(fitPoly,p,x)
function [faces,idx] = getFaces(f,vIndex)
function z = evalPolynomial(x,y,fitPoly)
function n = planeNormal(plane)
function plane = createPlane(varargin)
function [v,f] = CleaningMesh(v,f)
function [newf,newv] = omitBadShapedFaces(f,v)
function [f,v] = uselessFaceOmission(f,v)
function [f,v] = divideLargeFaces(f,v)
function [f,v] = deleteFaceIntersections(f,v)
function [templatePoints,CircumferenceValue  ] = template_circumference(vOnLine)
function [bodyPart_template_v,bodyPart_template_f] = fitting_templateToBodyParts(circ_template,n,zValue_vec,vIdxOnLine,x,y,start_vId,self)
function [r_arm_template_v,r_arm_template_f,l_arm_template_v,l_arm_template_f] = templateFitting_arm(self)
function [r_leg_template_v,r_leg_template_f,l_leg_template_v,l_leg_template_f] = templateFitting_leg(self)
function [trunk_template_v,trunk_template_f] = templateFitting_trunk(self)
function [head_neck_template_v,head_neck_template_f, head_neck_bottomSliceReducted_v, head_neck_bottomSliceReducted_f] = templateFitting_headNeck(self)
function [new_v1, new_v3] = rotate_person(v1, v3, alpha)
function [circ_template_s,circ_template_l,circ_template_xl] = init_circ()
function config = initialize_config_cpd
function [param, model] = gmmreg_cpd(config)
function [P, E] = cpd_P(x, y, sigma, outliers)
function G=cpd_G(x,y,beta)
function  [X, centroid, scale] = cpd_normalize(x)
function x =cpd_denormalize(X, centroid, scale)
function f = fixFaceOrientation_old(f,v)
function f = fixFaceOrientation(f,v)
function [f,v] = removeFace(f,v,idx)
function check = checkFaceOrientation(f)
function f = fixFaceOrientation2(f,v)
function [ volume ] = vol_calc( vv, f_tmp,offset )
function obj_data = read_obj(filename)
function [h, ext] = labelpoints (xpos, ypos, labels, varargin)
function [va, ha, u1, u2] = get_compass(compass_str, buffer, bufferUnits)
function self = OriginalRoatationLandmarks (CaseRot,alpha2,alpha3,self)